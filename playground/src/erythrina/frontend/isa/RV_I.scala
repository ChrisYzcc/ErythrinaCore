package erythrina.frontend.isa

import chisel3._
import chisel3.util._
import erythrina.frontend._
import erythrina.backend.fu.{ALUop, BRUop, LDUop, STUop}

object RVI_I extends InstrType {
    def LB    = BitPat("b???????_?????_?????_000_?????_00000_11")
    def LH    = BitPat("b???????_?????_?????_001_?????_00000_11")
    def LW    = BitPat("b???????_?????_?????_010_?????_00000_11")
    def LBU   = BitPat("b???????_?????_?????_100_?????_00000_11")
    def LHU   = BitPat("b???????_?????_?????_101_?????_00000_11")
    def ADDI  = BitPat("b???????_?????_?????_000_?????_00100_11")
    def SLTI  = BitPat("b???????_?????_?????_010_?????_00100_11")
    def SLTIU = BitPat("b???????_?????_?????_011_?????_00100_11")
    def XORI  = BitPat("b???????_?????_?????_100_?????_00100_11")
    def ORI   = BitPat("b???????_?????_?????_110_?????_00100_11")
    def ANDI  = BitPat("b???????_?????_?????_111_?????_00100_11")
    def SLLI  = BitPat("b0000000_?????_?????_001_?????_00100_11")
    def SRLI  = BitPat("b0000000_?????_?????_101_?????_00100_11")
    def SRAI  = BitPat("b0100000_?????_?????_101_?????_00100_11")

    val table = Array(
        LB  -> List(TypeI, FuType.ldu,  LDUop.lb),
        LH  -> List(TypeI, FuType.ldu,  LDUop.lh),
        LW  -> List(TypeI, FuType.ldu,  LDUop.lw),
        LBU -> List(TypeI, FuType.ldu,  LDUop.lbu),
        LHU -> List(TypeI, FuType.ldu,  LDUop.lhu),
        ADDI -> List(TypeI, FuType.alu, ALUop.add),
        SLTI -> List(TypeI, FuType.alu, ALUop.slt),
        SLTIU -> List(TypeI, FuType.alu, ALUop.sltu),
        XORI -> List(TypeI, FuType.alu, ALUop.xor),
        ORI  -> List(TypeI, FuType.alu, ALUop.or),
        ANDI -> List(TypeI, FuType.alu, ALUop.and),
        SLLI -> List(TypeI, FuType.alu, ALUop.sll),
        SRLI -> List(TypeI, FuType.alu, ALUop.srl),
        SRAI -> List(TypeI, FuType.alu, ALUop.sra)
    )
}

object RVI_U extends InstrType {
    def LUI     = BitPat("b???????_?????_?????_???_?????_01101_11")
    def AUIPC   = BitPat("b???????_?????_?????_???_?????_00101_11")

    val table = Array(
        LUI -> List(TypeU, FuType.alu, ALUop.dir),
        AUIPC -> List(TypeU, FuType.alu, ALUop.add)
    )
}

object RVI_R extends InstrType {
    def ADD   = BitPat("b0000000_?????_?????_000_?????_01100_11")
    def SUB   = BitPat("b0100000_?????_?????_000_?????_01100_11")
    def SLL   = BitPat("b0000000_?????_?????_001_?????_01100_11")
    def SLT   = BitPat("b0000000_?????_?????_010_?????_01100_11")
    def SLTU  = BitPat("b0000000_?????_?????_011_?????_01100_11")
    def XOR   = BitPat("b0000000_?????_?????_100_?????_01100_11")
    def SRL   = BitPat("b0000000_?????_?????_101_?????_01100_11")
    def SRA   = BitPat("b0100000_?????_?????_101_?????_01100_11")
    def OR    = BitPat("b0000000_?????_?????_110_?????_01100_11")
    def AND   = BitPat("b0000000_?????_?????_111_?????_01100_11")

    val table = Array(
        ADD -> List(TypeR, FuType.alu, ALUop.add),
        SUB -> List(TypeR, FuType.alu, ALUop.sub),
        SLL -> List(TypeR, FuType.alu, ALUop.sll),
        SLT -> List(TypeR, FuType.alu, ALUop.slt),
        SLTU -> List(TypeR, FuType.alu, ALUop.sltu),
        XOR -> List(TypeR, FuType.alu, ALUop.xor),
        SRL -> List(TypeR, FuType.alu, ALUop.srl),
        SRA -> List(TypeR, FuType.alu, ALUop.sra),
        OR  -> List(TypeR, FuType.alu, ALUop.or),
        AND -> List(TypeR, FuType.alu, ALUop.and)
    )
}

object RVI_S extends InstrType {
    def SB  = BitPat("b???????_?????_?????_000_?????_01000_11")
    def SH  = BitPat("b???????_?????_?????_001_?????_01000_11")
    def SW  = BitPat("b???????_?????_?????_010_?????_01000_11")

    val table = Array(
        SB -> List(TypeS, FuType.stu, STUop.sb),
        SH -> List(TypeS, FuType.stu, STUop.sh),
        SW -> List(TypeS, FuType.stu, STUop.sw)
    )
}

object RVI_J extends InstrType {
    def JAL   = BitPat("b???????_?????_?????_???_?????_11011_11")
    def JALR  = BitPat("b???????_?????_?????_000_?????_11001_11")

    val table = Array(
        JAL -> List(TypeJ, FuType.bru, BRUop.jal),
        JALR -> List(TypeJ, FuType.bru, BRUop.jalr)
    )
}

object RVI_B extends InstrType {
    def BEQ   = BitPat("b???????_?????_?????_000_?????_11000_11")
    def BNE   = BitPat("b???????_?????_?????_001_?????_11000_11")
    def BLT   = BitPat("b???????_?????_?????_100_?????_11000_11")
    def BGE   = BitPat("b???????_?????_?????_101_?????_11000_11")
    def BLTU  = BitPat("b???????_?????_?????_110_?????_11000_11")
    def BGEU  = BitPat("b???????_?????_?????_111_?????_11000_11")

    val table = Array(
        BEQ  -> List(TypeB, FuType.bru, BRUop.beq),
        BNE  -> List(TypeB, FuType.bru, BRUop.bne),
        BLT  -> List(TypeB, FuType.bru, BRUop.blt),
        BGE  -> List(TypeB, FuType.bru, BRUop.bge),
        BLTU -> List(TypeB, FuType.bru, BRUop.bltu),
        BGEU -> List(TypeB, FuType.bru, BRUop.bgeu)
    )
}

object RVI extends InstrType {
    val table = 
        RVI_I.table ++
        RVI_U.table ++
        RVI_R.table ++
        RVI_S.table ++
        RVI_J.table ++
        RVI_B.table
}